<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="..\..\CommonTableTemplate\CommonTableTemplate.tt"#>
<#
    string EntityKey = "EntityId";
    string EntityKeyParameter = "entityId";
    string EntityName = "Entity";
    string EntityNamePlural = "Entities";
    string EntityNameParameter = "entity";
    string EntityNamePluralParameter = "entities";
#>
using <#= UILogicModelsNamespace #>;
using <#= UILogicServicesNamespace #>;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace <#= UILogicRepositoriesNamespace #> 
{
    public class <#= EntityName #>Repository : I<#= EntityName #>Repository
    {
        private readonly I<#= EntityName #>ServiceProxy _<#= EntityNameParameter #>ServiceProxy;

        public <#= EntityName #>Repository(I<#= EntityName #>ServiceProxy <#= EntityNameParameter #>ServiceProxy) {
            _<#= EntityNameParameter #>ServiceProxy = <#= EntityNameParameter #>ServiceProxy;
        }

        // Get all <#= EntityNamePlural #>
        public async Task<CrudResult> Get<#= EntityNamePlural #>Async() {
            CrudResult crudResult = await _<#= EntityNameParameter #>ServiceProxy.Get<#= EntityNamePlural #>Async();
            return crudResult;
        }

        // Get a <#= EntityName #> by Id
        public async Task<CrudResult> Get<#= EntityName #>Async(int <#= EntityNameParameter #>Id) {
            CrudResult crudResult = await _<#= EntityNameParameter #>ServiceProxy.Get<#= EntityName #>Async(<#= EntityNameParameter #>Id);
            return crudResult;
        }

        // Create a new <#= EntityName #>
        public async Task<CrudResult> Create<#= EntityName #>Async(<#= EntityName #> <#= EntityNameParameter #>) {
            CrudResult crudResult = await _<#= EntityNameParameter #>ServiceProxy.Create<#= EntityName #>Async(<#= EntityNameParameter #>);
            return crudResult;
        }

        // Update an existing <#= EntityName #>
        public async Task<CrudResult> Update<#= EntityName #>Async(<#= EntityName #> <#= EntityNameParameter #>) {
            CrudResult crudResult = await _<#= EntityNameParameter #>ServiceProxy.Update<#= EntityName #>Async(<#= EntityNameParameter #>);
            return crudResult;
        }

        // Delete an existing <#= EntityName #>
        public async Task<CrudResult> Delete<#= EntityName #>Async(int <#= EntityNameParameter #>Id) {
            CrudResult crudResult = await _<#= EntityNameParameter #>ServiceProxy.Delete<#= EntityName #>Async(<#= EntityNameParameter #>Id);
            return crudResult;
        }
    }
}

